/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Lexicon.View.LexHome;
import Model.Parser;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Andreas Novian
 */
public class ParserHome extends javax.swing.JFrame {

    Parser parser;
    LexHome lexicon;

    /**
     * Creates new form Home
     *
     * @throws java.io.IOException
     */
    public ParserHome() throws IOException {
        initComponents();
        this.setSize(1000, 700);
        this.setLocationRelativeTo(null);
        this.setTitle("MORPHOLOGICAL PARSER");
        this.lexicon = new LexHome(this);
        this.parser = new Parser(this.lexicon.lexc);
        this.lexicon.setVisible(false);
        this.validatorCheckBox.doClick();
        this.converterCheckBox.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        parseButton = new javax.swing.JButton();
        titleLabel1 = new javax.swing.JLabel();
        titleLabel2 = new javax.swing.JLabel();
        inputLabel = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();
        lexiconButton = new javax.swing.JButton();
        validatorCheckBox = new javax.swing.JCheckBox();
        converterCheckBox = new javax.swing.JCheckBox();
        insertFileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        inputTextArea.setColumns(20);
        inputTextArea.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        inputTextArea.setRows(5);
        jScrollPane2.setViewportView(inputTextArea);

        parseButton.setFont(new java.awt.Font("Constantia", 0, 18)); // NOI18N
        parseButton.setText("PARSE");
        parseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseButtonActionPerformed(evt);
            }
        });

        titleLabel1.setFont(new java.awt.Font("Constantia", 0, 24)); // NOI18N
        titleLabel1.setText("MORPHOLOGICAL PARSER");

        titleLabel2.setFont(new java.awt.Font("Constantia", 0, 24)); // NOI18N
        titleLabel2.setText("FOR TEXTS IN BAHASA INDONESIA");

        inputLabel.setFont(new java.awt.Font("Constantia", 0, 14)); // NOI18N
        inputLabel.setText("INPUT:");

        outputLabel.setFont(new java.awt.Font("Constantia", 0, 14)); // NOI18N
        outputLabel.setText("OUTPUT:");

        lexiconButton.setFont(new java.awt.Font("Constantia", 0, 14)); // NOI18N
        lexiconButton.setText("LEXICON");
        lexiconButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexiconButtonActionPerformed(evt);
            }
        });

        validatorCheckBox.setFont(new java.awt.Font("Constantia", 0, 12)); // NOI18N
        validatorCheckBox.setText("VALIDATOR");
        validatorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validatorCheckBoxActionPerformed(evt);
            }
        });

        converterCheckBox.setFont(new java.awt.Font("Constantia", 0, 12)); // NOI18N
        converterCheckBox.setText("CONVERTER");
        converterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                converterCheckBoxActionPerformed(evt);
            }
        });

        insertFileButton.setFont(new java.awt.Font("Constantia", 0, 14)); // NOI18N
        insertFileButton.setText("INSERT FROM FILE");
        insertFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lexiconButton)
                                .addGap(229, 229, 229)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addComponent(titleLabel1))
                                    .addComponent(titleLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(432, 432, 432)
                                .addComponent(parseButton)
                                .addGap(36, 36, 36)
                                .addComponent(validatorCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(converterCheckBox))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(insertFileButton))
                            .addComponent(outputLabel))
                        .addGap(0, 193, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lexiconButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titleLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputLabel)
                    .addComponent(insertFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parseButton)
                    .addComponent(validatorCheckBox)
                    .addComponent(converterCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void parseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseButtonActionPerformed
        String input = inputTextArea.getText();
        if (!input.equalsIgnoreCase("")) {
            try {
                outputTextArea.setText(parser.process(input, validatorCheckBox.isSelected(), converterCheckBox.isSelected()));
            } catch (IOException ex) {
                Logger.getLogger(ParserHome.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_parseButtonActionPerformed

    private void validatorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validatorCheckBoxActionPerformed
        String input = inputTextArea.getText();
        if (!input.equalsIgnoreCase("")) {
            try {
                outputTextArea.setText(parser.process(input, validatorCheckBox.isSelected(), converterCheckBox.isSelected()));
            } catch (IOException ex) {
                Logger.getLogger(ParserHome.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_validatorCheckBoxActionPerformed

    private void converterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_converterCheckBoxActionPerformed
        String input = inputTextArea.getText();
        if (!input.equalsIgnoreCase("")) {
            try {
                outputTextArea.setText(parser.process(input, validatorCheckBox.isSelected(), converterCheckBox.isSelected()));
            } catch (IOException ex) {
                Logger.getLogger(ParserHome.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_converterCheckBoxActionPerformed

    private void lexiconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexiconButtonActionPerformed
        this.setVisible(false);
        this.lexicon.setVisible(true);
    }//GEN-LAST:event_lexiconButtonActionPerformed

    private void insertFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertFileButtonActionPerformed
        String dir, text;
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("txt file", "txt");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            dir = chooser.getCurrentDirectory() + "\\" + chooser.getSelectedFile().getName();
            try {
                text = this.parser.readFile(dir);
                this.inputTextArea.setText(text);
            } catch (IOException ex) {
                Logger.getLogger(ParserHome.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_insertFileButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParserHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParserHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParserHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParserHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new ParserHome().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ParserHome.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox converterCheckBox;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JButton insertFileButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton lexiconButton;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton parseButton;
    private javax.swing.JLabel titleLabel1;
    private javax.swing.JLabel titleLabel2;
    private javax.swing.JCheckBox validatorCheckBox;
    // End of variables declaration//GEN-END:variables
}
